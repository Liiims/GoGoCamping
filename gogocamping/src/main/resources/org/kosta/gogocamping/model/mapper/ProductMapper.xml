<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosta.gogocamping.model.mapper.ProductMapper">
<sql id="selectProductAll">
	select rnum, product_id, product_name, price, product_img, product_img_stored
</sql>
<sql id="selectProductAllWithCategory">
	select rnum, p.product_id, p.product_name, p.price, p.product_img, product_img_stored
</sql>

<resultMap id="productMap" type="ProductVO">
	<result property="sellerVO.sellerId" column="seller_id"/>
	<result property="sellerVO.sellerEmail" column="seller_email"/>
	<result property="sellerVO.brand" column="brand"/>
	<result property="sellerVO.sellerTel" column="seller_tel"/>
	<result property="categoryVO.categoryNo" column="category_no"/>
	<result property="categoryVO.categoryName" column="category_name"/>
	<result property="categoryVO.detailCategoryName" column="detail_category_name"/>
</resultMap> 
<resultMap id="productDetailMap" type="OrderDetailVO">
	<result property="sellerVO.sellerId" column="seller_id"/>
	<result property="productVO.productId" column="product_id"/>
	<result property="productVO.productName" column="product_name"/>
	<result property="orderInfoVO.orderNo" column="order_no"/>
	<result property="orderInfoVO.orderDate" column="order_date"/>	
</resultMap> 

<!-- 전체 상품 조회 -->
<select id="getAllProductList" parameterType="Map" resultType="ProductVO">
	<include refid="selectProductAll"/> 
	from (select p.*, row_number() 
	<choose>
		<when test='option.equals("low")'>
			over(order by price) 
		</when>
		<when test='option.equals("high")'>
			over(order by price desc) 
		</when>
		<otherwise>
			over(order by product_name) 
		</otherwise>
	</choose>
	as rnum from product p) where rnum between #{startRowNumber} and #{endRowNumber}
</select>
<!-- 전체 상품 조회 (인기순 정렬) -->
<select id="getAllProductListByPopular" parameterType="Map" resultType="ProductVO">
	select rnum, product_id, product_name, price, product_img, product_img_stored, c from (
	select * from (
		select p.*, row_number() over(order by (select count(*) from order_detail where product_id = p.product_id group by p.product_id)) as rnum,
		nvl((select count(*) from order_detail where product_id = p.product_id group by p.product_id), 0) as c
		from product p
	) order by c desc) where rnum between #{startRowNumber} and #{endRowNumber}
</select>	
<select id="getAllProductCount" resultType="int">
	select count(*) from product
</select>

<!-- 검색된 상품 조회 -->
<select id="getSearchProductList" parameterType="Map" resultType="ProductVO">
	<include refid="selectProductAllWithCategory"/> 
	from (
	   select p.*, row_number() 
		<choose>
			<when test='option.equals("low")'>
				over(order by price) 
			</when>
			<when test='option.equals("high")'>
				over(order by price desc) 
			</when>
			<otherwise>
				over(order by product_name) 
			</otherwise>
		</choose>
	   as rnum, c.category_name, c.detail_category_name
	   from product p, category c where p.category_no=c.category_no and REPLACE(p.product_name, ' ', '') like '%' || #{keyword} || '%'
	) p
	<!-- where rnum between #{startRowNumber} and #{endRowNumber} -->
</select>
<!-- 검색된 상품 조회 (인기순 정렬) -->
<select id="getSearchProductListByPopular" parameterType="Map" resultType="ProductVO">
	select p.*, c.*, nvl((select count(*) from order_detail where product_id = p.product_id group by p.product_id), 0) as c
	from product p, category c where p.category_no=c.category_no and REPLACE(p.product_name, ' ', '') like '%' || #{keyword} || '%'
	order by c desc
</select>
<select id="getSearchProductCount" parameterType="Map" resultType="int">
	select count(*) from product
	where REPLACE(product_name, ' ', '') like '%' || #{keyword} || '%'
</select>

<parameterMap id="registerProductMap" type="ProductVO">
	<parameter property="sellerVO.sellerId"/>
	<parameter property="categoryVO.categoryNo"/>
</parameterMap> 
<parameterMap id="updateProductMap" type="ProductVO">
	<parameter property="categoryVO.categoryNo"/>
</parameterMap> 
<parameterMap id="updateDeliveryMap" type="OrderDetailVO">
	<parameter property="productVO.productId"/>
</parameterMap> 

<!-- 해당 브랜드에 존재하는 카테고리 조회 -->
<select id="getBrandCategroyList" resultMap="productMap" parameterType="Map">
	select distinct c.category_name, s.brand
	from product p, seller s, category c
	where p.seller_id = s.seller_id and p.category_no = c.category_no
	and s.brand = #{brand}
	order by c.category_name desc
</select>
<!-- 브랜드별 상품 조회 -->
<select id="getProductListByBrand" resultMap="productMap" parameterType="Map">
	select p.*, s.seller_id, s.seller_email, s.brand, s.seller_tel, c.* 
	from product p, seller s, category c
	where p.seller_id = s.seller_id and p.category_no = c.category_no
	and s.brand = #{brand}
	<choose>
		<when test='option.equals("low")'>
			order by price 
		</when>
		<when test='option.equals("high")'>
			order by price desc
		</when>
		<otherwise>
			order by product_name
		</otherwise>
	</choose>
</select>
<!-- 브랜드별 상품 조회 (인기순 정렬) -->
<select id="getProductListByBrandByPopular" resultMap="productMap" parameterType="Map">
	select s.brand, p.*, nvl((select count(*) from order_detail where product_id = p.product_id group by p.product_id), 0) as c
	from product p, seller s
	where p.seller_id = s.seller_id
	and s.brand = #{brand} order by c desc
</select>
<!-- 브랜드 카테고리별 상품 조회 -->
<select id="getProductListByBrandAndCategory" resultMap="productMap" parameterType="Map">
	select s.brand, p.*, c.*
	from product p, seller s, category c
	where p.seller_id = s.seller_id and p.category_no = c.category_no
	and s.brand = #{brand} and c.category_name = #{category}
	<choose>
		<when test='option.equals("low")'>
			order by price 
		</when>
		<when test='option.equals("high")'>
			order by price desc
		</when>
		<otherwise>
			order by product_name
		</otherwise>
	</choose>
</select>
<!-- 브랜드 카테고리별 상품 조회 (인기순 정렬) -->
<select id="getProductListByBrandAndCategoryByPopular" resultMap="productMap" parameterType="Map">
	select s.brand, p.*, c.*, nvl((select count(*) from order_detail where product_id = p.product_id group by p.product_id), 0) as c
	from product p, seller s, category c
	where p.seller_id = s.seller_id and p.category_no = c.category_no
	and s.brand = #{brand} and c.category_name = #{category} order by c desc
</select>
<!-- 상품 상세페이지 로딩 시 정보 조회 -->
<select id="getProductDetailInfo" resultMap="productMap" parameterType="int">
	select * from product where product_id = #{value}
</select>
<select id="getProductStockCount" parameterType="int" resultType="int">
	select stock from product where product_id = #{value}
</select>
<update id="updateProductStockCount" parameterType="map">
	update product set stock = stock - #{productCount} where product_id = #{productId}
</update>

<!-- 상품 상세 페이지에서 관련(동일 카테고리) 상품 조회 -->
<select id="getRelatedProductList" parameterType="String" resultType="ProductVO">
	select p.*
	from product p, (select category_no, category_name from category where category_name=#{value}) c
	where p.category_no = c.category_no
</select>

<insert id="registerProduct" parameterMap="registerProductMap">
	insert into product(product_id, product_name, price, product_info, stock, product_img, product_img_stored, seller_id, category_no)
	values(product_seq.nextval, #{productName}, #{price}, #{productInfo}, #{stock}, #{productImg}, #{productImgStored}, #{sellerVO.sellerId}, #{categoryVO.categoryNo})
</insert>
<select id="getSellerProductList" resultMap="productMap" parameterType="String">
	select p.product_id, p.product_name, p.price, p.product_info, p.stock, c.category_no, c.category_name, c.detail_category_name
	from product p, category c
	where p.seller_id = #{sellerVO.sellerId} and p.category_no = c.category_no
	order by p.product_id desc
</select>
<select id="getProductInfo" resultMap="productMap" parameterType="int">
	select *
	from product
	where product_id = #{productId}
</select>
<update id="updateProduct" parameterMap="updateProductMap">
	update product 
	set product_name = #{productName}, price = #{price}, product_info = #{productInfo}, stock = #{stock}, 
	product_img = #{productImg}, product_img_stored = #{productImgStored}, category_no = #{categoryVO.categoryNo}
	where product_id = #{productId}
</update>
<select id="getOrderList" resultMap="productDetailMap" parameterType="String">
	select i.order_no, p.product_name, p.product_id, d.order_detail_no, d.order_count, i.order_date, d.order_price, d.delivery_status
	from order_info i, order_detail d, product p
	where d.product_id = p.product_id 
	and i.order_no = d.order_no
	and seller_id = #{sellerId}
</select>
<update id="updateDeliveryStatus" parameterType="map">
	update order_detail set delivery_status = #{deliveryStatus} where order_detail_no = #{orderDetailNo}
</update>
</mapper>

